name: Spring Boot CI/CD Workflow
description: 用于 Spring Boot 应用程序的 CI/CD 工作流
run-name: ${{ github.actor }} 正在运行 CI/CD 工作流 - ${{ github.event_name }}

on:
  push:
    branches: [ "main", "master", "develop" ]
  pull_request:
    branches: [ "main", "master" ]
  workflow_dispatch:
    inputs:
      deploy:
        description: '是否部署'
        required: true
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  build:
    name: 构建和测试
    runs-on: ubuntu-latest
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史用于 SonarQube

      - name: 设置 JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: 缓存 Maven 依赖
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: 代码风格检查
        run: mvn checkstyle:check

      - name: Maven 构建
        run: mvn -B package --file pom.xml

      - name: 单元测试
        run: mvn test

      - name: SonarQube 代码质量分析
        if: ${{ github.event_name != 'pull_request' && false }}  # 默认禁用，需要时启用
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: >
          mvn org.sonarsource.scanner.maven:sonar-maven-plugin:sonar
          -Dsonar.projectKey=springboot3-demo
          -Dsonar.organization=mlinyun
          -Dsonar.host.url=https://sonarcloud.io

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: springboot3-demo
          path: target/*.jar
          retention-days: 7

  deploy:
    name: 部署应用
    runs-on: ubuntu-latest
    needs: build
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.deploy == 'true' }}
    
    steps:
      - name: 下载构建产物
        uses: actions/download-artifact@v4
        with:
          name: springboot3-demo
          path: ./target

      - name: 显示构建产物
        run: ls -la ./target

      - name: 部署到测试环境
        run: echo "部署到测试环境的脚本将在这里执行"
        # 这里可以添加实际的部署脚本，例如使用 SSH 部署到远程服务器
        # 可以使用 appleboy/ssh-action@master 等 action

  release:
    name: 创建发布
    runs-on: ubuntu-latest
    needs: build
    if: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' }}
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        
      - name: 下载构建产物
        uses: actions/download-artifact@v4
        with:
          name: springboot3-demo
          path: ./target
          
      - name: 获取版本
        id: get_version
        run: echo "VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_OUTPUT
        
      - name: 创建发布
        if: false  # 默认禁用，需要时启用
        uses: softprops/action-gh-release@v1
        with:
          name: v${{ steps.get_version.outputs.VERSION }}
          tag_name: v${{ steps.get_version.outputs.VERSION }}
          draft: true
          prerelease: false
          files: |
            ./target/*.jar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
