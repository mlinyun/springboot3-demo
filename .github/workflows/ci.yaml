name: Spring Boot CI/CD Workflow
run-name: ${{ github.actor }} 正在运行 CI/CD 工作流 - ${{ github.event_name }}

on:
  push:
    branches: [ "main", "master", "develop" ]
  pull_request:
    branches: [ "main", "master" ]
  workflow_dispatch:
    inputs:
      deploy:
        description: '是否部署'
        required: true
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  build:
    name: 构建和测试
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: 123456
          MYSQL_DATABASE: springboot3_db
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

      redis:
        image: redis:7.4
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
        env:
          REDIS_PASSWORD: 123456

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史用于 SonarQube

      - name: 设置 JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: 缓存 Maven 依赖
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: 等待 MySQL 准备就绪
        run: |
          while ! mysqladmin ping -h"127.0.0.1" -P"3306" --silent; do
            echo "等待 MySQL 启动..."
            sleep 2
          done
          echo "MySQL 已就绪"

      - name: 初始化数据库
        run: |
          echo "检查数据库是否创建..."
          if mysql -h 127.0.0.1 -P 3306 -u root -p123456 -e "SHOW DATABASES LIKE 'springboot3_db';" | grep -q "springboot3_db"; then
            echo "数据库 springboot3_db 已存在"
          else
            echo "创建数据库 springboot3_db..."
            mysql -h 127.0.0.1 -P 3306 -u root -p123456 -e "CREATE DATABASE IF NOT EXISTS springboot3_db CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;"
            echo "数据库 springboot3_db 创建成功"
          fi
          
          # 初始化表结构(如果有初始化SQL脚本)
          if [ -f "sql/springboot3-demo.sql" ]; then
            echo "导入数据库表结构..."
            mysql -h 127.0.0.1 -P 3306 -u root -p123456 springboot3_db < sql/springboot3-demo.sql
            echo "表结构导入完成"
          fi

      - name: 验证 Redis 连接
        run: |
          sudo apt-get update
          sudo apt-get install -y redis-tools
          redis-cli -h 127.0.0.1 -p 6379 -a 123456 ping
          echo "Redis 已就绪"

      - name: 代码风格检查
        run: mvn checkstyle:check

      - name: Maven 构建
        run: mvn -B package --file pom.xml

      - name: 单元测试
        run: mvn test
        env:
          SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/springboot3_db?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=GMT%2B8
          SPRING_DATASOURCE_USERNAME: root
          SPRING_DATASOURCE_PASSWORD: 123456
          SPRING_DATA_REDIS_HOST: localhost
          SPRING_DATA_REDIS_PORT: 6379
          SPRING_DATA_REDIS_PASSWORD: 123456

      - name: SonarQube 代码质量分析
        if: false # 目前禁用 SonarQube 分析
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: >
          mvn org.sonarsource.scanner.maven:sonar-maven-plugin:sonar
          -Dsonar.projectKey=springboot3-demo
          -Dsonar.organization=mlinyun
          -Dsonar.host.url=https://sonarcloud.io

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: springboot3-demo
          path: target/*.jar
          retention-days: 7

  release:
    name: 创建发布
    runs-on: ubuntu-latest
    needs: build
    if: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' }}
    permissions:
      contents: write
      packages: write

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史用于生成更新日志

      - name: 下载构建产物
        uses: actions/download-artifact@v4
        with:
          name: springboot3-demo
          path: ./target

      - name: 获取版本
        id: get_version
        run: echo "VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_OUTPUT

      - name: 获取比较点
        id: get_comparison_point
        run: |
          # 获取当前分支最早的提交作为比较起点
          FIRST_COMMIT=$(git rev-list --max-parents=0 HEAD)
          # 获取最近的10个提交作为比较范围
          RECENT_COMMIT=$(git rev-parse HEAD~10 2>/dev/null || echo "$FIRST_COMMIT")
          echo "比较点: $RECENT_COMMIT"
          echo "compare_point=$RECENT_COMMIT" >> $GITHUB_OUTPUT

      - name: 生成日志更新
        id: changelog
        uses: mikepenz/release-changelog-builder-action@v4
        with:
          configuration: ".github/changelog-configuration.json"
          ignorePreReleases: "false"
          fetchReleaseInformation: "false"
          failOnError: "false"
          toTag: ${{ github.sha }}
          fromTag: ${{ steps.get_comparison_point.outputs.compare_point }}
          # 设置为提交模式，不再依赖 PR
          commitMode: "true"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 创建发布
        if: ${{ (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && github.event_name != 'workflow_dispatch' }}
        uses: softprops/action-gh-release@v1
        with:
          name: v${{ steps.get_version.outputs.VERSION }}
          tag_name: v${{ steps.get_version.outputs.VERSION }}
          body: |
            ## Spring Boot 3 Demo 项目发布 v${{ steps.get_version.outputs.VERSION }}
            
            ### 更新内容
            ${{ steps.changelog.outputs.changelog }}
            
            ### 下载
            - [SpringBoot3-Demo-${{ steps.get_version.outputs.VERSION }}.jar](https://github.com/${{ github.repository }}/releases/download/v${{ steps.get_version.outputs.VERSION }}/springboot3-demo-${{ steps.get_version.outputs.VERSION }}.jar)
          draft: true  # 创建为草稿版本，可以在发布前进行最终检查
          prerelease: false
          files: |
            ./target/*.jar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    name: 部署应用
    runs-on: ubuntu-latest
    needs: build
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.deploy == 'true' }}

    steps:
      - name: 下载构建产物
        uses: actions/download-artifact@v4
        with:
          name: springboot3-demo
          path: ./target

      - name: 显示构建产物
        run: ls -la ./target

      - name: 部署到测试环境
        run: echo "部署到测试环境的脚本将在这里执行"
        # 这里可以添加实际的部署脚本，例如使用 SSH 部署到远程服务器
        # 可以使用 appleboy/ssh-action@master 等 action